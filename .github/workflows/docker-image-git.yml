name: Build, Push Docker Image, and Create Release for Redoracle Plugins

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 3 * *'
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to deploy
        required: false
        default: main
      testing:
        description: Enable testing workflow
        required: false
        type: boolean
        default: false
      tag:
        description: Tag for the release (e.g., v1.0.0)
        required: false

jobs:
  build-and-push:
    env:
      DOCKER_REGISTRY: docker.io
      GITHUB_REGISTRY: ghcr.io
      N8N_VERSION: "1.0.0"
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout this repository (if you have custom plugins or files)
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js and enable pnpm caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Step 3: Set up pnpm using the official action
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.2.1 

      # Step 4: Clone the upstream n8n repository into a subfolder
      - name: Clone n8n Repository
        run: |
          git clone https://github.com/n8n-io/n8n.git n8n
          cd n8n
          echo "Cloned n8n from upstream."

      # Step 5: Install global dependencies (turbo, typescript, rimraf, cross-env, vue-tsc)
      - name: Install Global Dependencies
        working-directory: n8n
        run: |
          pnpm install -g turbo
          pnpm install -g typescript rimraf
          pnpm install -g cross-env vue-tsc

      # Step 6: Clean pnpm cache and node_modules then install dependencies
      - name: Clean and Install Dependencies
        working-directory: n8n
        run: |
          pnpm cache delete
          rm -rf node_modules
          pnpm install

      # Step 7: Install additional dependencies at the workspace root
      - name: Install Additional Dependencies at Workspace Root
        working-directory: n8n
        run: |
          pnpm install --save -w \
            full-icu@1.5.0 \
            @aws-sdk/client-sso-oidc@">=3.664.0 <4.0.0-0" \
            neo4j-driver \
            fast-levenshtein \
            axios \
            compromise \
            natural \
            wink-nlp \
            wink-ner \
            shodan \
            node-readability \
            selenium-webdriver
          pnpm install --save-dev -w @types/natural

      # Step 8: Build the n8n project
      - name: Build n8n
        working-directory: n8n
        run: pnpm run build

      # Step 9: Set up QEMU and Docker Buildx (for multi-architecture builds)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 10: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 11: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Step 12: Build and Push Docker Image
      - name: Build and Push Docker Image
        working-directory: n8n/docker/images/n8n
        run: |
          docker buildx build \
            --build-arg N8N_VERSION=${{ env.N8N_VERSION }} \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t ${{ env.DOCKER_REGISTRY }}/redoracle/redoracle-n8n:latest \
            -t ${{ env.GITHUB_REGISTRY }}/redoracle/redoracle-n8n:latest \
            .

      # Step 13: Add Build Summary Details
      - name: Add Summary Details
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Docker Hub: [${{ env.DOCKER_REGISTRY }}/redoracle/redoracle-n8n:latest](https://${{ env.DOCKER_REGISTRY }}/r/redoracle/redoracle-n8n)" >> $GITHUB_STEP_SUMMARY
          echo "* GitHub Registry: [${{ env.GITHUB_REGISTRY }}/redoracle/redoracle-n8n:latest](https://${{ env.GITHUB_REGISTRY }}/redoracle/redoracle-n8n)" >> $GITHUB_STEP_SUMMARY

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Tag
        id: get_tag
        run: echo "tag=${{ github.ref_name || github.event.inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Check Release Existence
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ steps.get_tag.outputs.tag }}';
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const exists = releases.data.some(release => release.tag_name === tag);
            core.setOutput('exists', exists);

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          body: |
            ### Redoracle Plugins Release ${{ steps.get_tag.outputs.tag }}
            - **Docker Hub**: [${{ env.DOCKER_REGISTRY }}/redoracle/redoracle-n8n:latest](https://${{ env.DOCKER_REGISTRY }}/r/redoracle/redoracle-n8n)
            - **GitHub Registry**: [${{ env.GITHUB_REGISTRY }}/redoracle/redoracle-n8n:latest](https://${{ env.GITHUB_REGISTRY }}/redoracle/redoracle-n8n)

      - name: Notify Existing Release
        if: steps.check_release.outputs.exists == 'true'
        run: echo "Release ${{ steps.get_tag.outputs.tag }} already exists."
        